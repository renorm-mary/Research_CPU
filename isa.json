{
  "registers": {
    "R0": "00000",
    "R1": "00001",
    "R2": "00010",
    "R3": "00011",
    "R4": "00100",
    "R5": "00101",
    "R6": "00110",
    "R7": "00111",
    "R8": "01000",
    "R9": "01001",
    "R10": "01010",
    "R11": "01011",
    "R12": "01100",
    "R13": "01101",
    "R14": "01110",
    "R15": "01111",
    "R16": "10000",
    "R17": "10001",
    "R18": "10010",
    "R19": "10011",
    "R20": "10100",
    "R21": "10101",
    "R22": "10110",
    "R23": "10111",
    "R24": "11000",
    "R25": "11001",
    "R26": "11010",
    "R27": "11011",
    "R28": "11100",
    "R29": "11101",
    "R30": "11110",
    "R31": "11111"
  },
  "instructions": [
    {
      "mnemonic": "ADD",
      "opcode": 1,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "000001 r1 r2 r3",
      "bitwise_description": {
        "opcode": "000001",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Add contents of register r2 and r3 and store in r1"
    },
    {
      "mnemonic": "SUB",
      "opcode": 2,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "000010 r1 r2 r3",
      "bitwise_description": {
        "opcode": "000010",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Subtract contents of register r3 from r2 and store in r1"
    },
    {
      "mnemonic": "FADD",
      "opcode": 3,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "000011 r1 r2 r3",
      "bitwise_description": {
        "opcode": "000011",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Add floating-point values in r2 and r3 and store in r1"
    },
    {
      "mnemonic": "FSUB",
      "opcode": 4,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "000100 r1 r2 r3",
      "bitwise_description": {
        "opcode": "000100",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Subtract floating-point value in r3 from r2 and store in r1"
    },
    {
      "mnemonic": "VADD",
      "opcode": 5,
      "operand_count": 3,
      "operand_types": ["vector", "vector", "vector"],
      "format": "000101 v1 v2 v3",
      "bitwise_description": {
        "opcode": "000101",
        "v1": "5 bits",
        "v2": "5 bits",
        "v3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "v1": 3,
        "v2": 3,
        "v3": 3
      },
      "description": "Add vector v2 and v3 and store in v1"
    },
    {
      "mnemonic": "VSUB",
      "opcode": 6,
      "operand_count": 3,
      "operand_types": ["vector", "vector", "vector"],
      "format": "000110 v1 v2 v3",
      "bitwise_description": {
        "opcode": "000110",
        "v1": "5 bits",
        "v2": "5 bits",
        "v3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "v1": 3,
        "v2": 3,
        "v3": 3
      },
      "description": "Subtract vector v3 from v2 and store in v1"
    },
    {
      "mnemonic": "MUL",
      "opcode": 7,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "000111 r1 r2 r3",
      "bitwise_description": {
        "opcode": "000111",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Multiply contents of register r2 and r3 and store in r1"
    },
    {
      "mnemonic": "DIV",
      "opcode": 8,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "001000 r1 r2 r3",
      "bitwise_description": {
        "opcode": "001000",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Divide contents of register r2 by r3 and store in r1"
    },
    {
      "mnemonic": "FMUL",
      "opcode": 9,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "001001 r1 r2 r3",
      "bitwise_description": {
        "opcode": "001001",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Multiply floating-point values in r2 and r3 and store in r1"
    },
    {
      "mnemonic": "FDIV",
      "opcode": 10,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "001010 r1 r2 r3",
      "bitwise_description": {
        "opcode": "001010",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Divide floating-point value in r2 by r3 and store in r1"
    },
    {
      "mnemonic": "VMUL",
      "opcode": 11,
      "operand_count": 3,
      "operand_types": ["vector", "vector", "vector"],
      "format": "001011 v1 v2 v3",
      "bitwise_description": {
        "opcode": "001011",
        "v1": "5 bits",
        "v2": "5 bits",
        "v3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "v1": 3,
        "v2": 3,
        "v3": 3
      },
      "description": "Multiply vector v2 and v3 and store in v1"
    },
    {
      "mnemonic": "VDIV",
      "opcode": 12,
      "operand_count": 3,
      "operand_types": ["vector", "vector", "vector"],
      "format": "001100 v1 v2 v3",
      "bitwise_description": {
        "opcode": "001100",
        "v1": "5 bits",
        "v2": "5 bits",
        "v3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "v1": 3,
        "v2": 3,
        "v3": 3
      },
      "description": "Divide vector v2 by v3 and store in v1"
    },
    {
      "mnemonic": "LOAD",
      "opcode": 13,
      "operand_count": 2,
      "operand_types": ["register", "memory"],
      "format": "001101 r1 m1",
      "bitwise_description": {
        "opcode": "001101",
        "r1": "5 bits",
        "m1": "memory address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "m1": 16
      },
      "description": "Load content from memory location m1 into register r1"
    },
    {
      "mnemonic": "STORE",
      "opcode": 14,
      "operand_count": 2,
      "operand_types": ["memory", "register"],
      "format": "001110 m1 r1",
      "bitwise_description": {
        "opcode": "001110",
        "m1": "memory address bits",
        "r1": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "m1": 16,
        "r1": 3
      },
      "description": "Store content of register r1 into memory location m1"
    },
    {
      "mnemonic": "CMP",
      "opcode": 15,
      "operand_count": 2,
      "operand_types": ["register", "register"],
      "format": "001111 r1 r2",
      "bitwise_description": {
        "opcode": "001111",
        "r1": "5 bits",
        "r2": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3
      },
      "description": "Compare contents of register r1 and r2"
    },
    {
      "mnemonic": "FCMP",
      "opcode": 16,
      "operand_count": 2,
      "operand_types": ["register", "register"],
      "format": "010000 r1 r2",
      "bitwise_description": {
        "opcode": "010000",
        "r1": "5 bits",
        "r2": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3
      },
      "description": "Compare floating-point values in r1 and r2"
    },
    {
      "mnemonic": "JUMP",
      "opcode": 17,
      "operand_count": 1,
      "operand_types": ["address"],
      "format": "010001 a1",
      "bitwise_description": {
        "opcode": "010001",
        "a1": "address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "a1": 16
      },
      "description": "Jump to address a1"
    },
    {
      "mnemonic": "JZ",
      "opcode": 18,
      "operand_count": 1,
      "operand_types": ["address"],
      "format": "010010 a1",
      "bitwise_description": {
        "opcode": "010010",
        "a1": "address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "a1": 16
      },
      "description": "Jump to address a1 if zero flag is set"
    },
    {
      "mnemonic": "JNZ",
      "opcode": 19,
      "operand_count": 1,
      "operand_types": ["address"],
      "format": "010011 a1",
      "bitwise_description": {
        "opcode": "010011",
        "a1": "address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "a1": 16
      },
      "description": "Jump to address a1 if zero flag is not set"
    },
    {
      "mnemonic": "FMOV",
      "opcode": 20,
      "operand_count": 2,
      "operand_types": ["register", "register"],
      "format": "010100 r1 r2",
      "bitwise_description": {
        "opcode": "010100",
        "r1": "5 bits",
        "r2": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3
      },
      "description": "Move floating-point value from r2 to r1"
    },
    {
      "mnemonic": "HALT",
      "opcode": 21,
      "operand_count": 0,
      "operand_types": [],
      "format": "010101",
      "bitwise_description": {
        "opcode": "010101"
      },
      "field_sizes": {
        "opcode": 6
      },
      "description": "Halt the processor"
    },
    {
      "mnemonic": "PIM_ADD",
      "opcode": 22,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "010110 r1 r2 r3",
      "bitwise_description": {
        "opcode": "010110",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory add operation"
    },
    {
      "mnemonic": "PIM_SUB",
      "opcode": 23,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "010111 r1 r2 r3",
      "bitwise_description": {
        "opcode": "010111",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory subtract operation"
    },
    {
      "mnemonic": "PIM_MUL",
      "opcode": 24,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011000 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011000",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory multiply operation"
    },
    {
      "mnemonic": "PIM_DIV",
      "opcode": 25,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011001 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011001",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory divide operation"
    },
    {
      "mnemonic": "PIM_FADD",
      "opcode": 26,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011010 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011010",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory floating-point add operation"
    },
    {
      "mnemonic": "PIM_FSUB",
      "opcode": 27,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011011 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011011",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory floating-point subtract operation"
    },
    {
      "mnemonic": "PIM_FMUL",
      "opcode": 28,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011100 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011100",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory floating-point multiply operation"
    },
    {
      "mnemonic": "PIM_FDIV",
      "opcode": 29,
      "operand_count": 3,
      "operand_types": ["register", "register", "register"],
      "format": "011101 r1 r2 r3",
      "bitwise_description": {
        "opcode": "011101",
        "r1": "5 bits",
        "r2": "5 bits",
        "r3": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "r3": 3
      },
      "description": "Processor-in-memory floating-point divide operation"
    },
    {
      "mnemonic": "INT",
      "opcode": 30,
      "operand_count": 1,
      "operand_types": ["interrupt"],
      "format": "011110 i1",
      "bitwise_description": {
        "opcode": "011110",
        "i1": "interrupt bits"
      },
      "field_sizes": {
        "opcode": 6,
        "i1": 8
      },
      "description": "Trigger interrupt i1"
    },
    {
      "mnemonic": "IRET",
      "opcode": 31,
      "operand_count": 0,
      "operand_types": [],
      "format": "011111",
      "bitwise_description": {
        "opcode": "011111"
      },
      "field_sizes": {
        "opcode": 6
      },
      "description": "Return from interrupt"
    },
    {
      "mnemonic": "IN",
      "opcode": 32,
      "operand_count": 2,
      "operand_types": ["register", "port"],
      "format": "100000 r1 p1",
      "bitwise_description": {
        "opcode": "100000",
        "r1": "5 bits",
        "p1": "port bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "p1": 8
      },
      "description": "Input from port p1 to register r1"
    },
    {
      "mnemonic": "OUT",
      "opcode": 33,
      "operand_count": 2,
      "operand_types": ["port", "register"],
      "format": "100001 p1 r1",
      "bitwise_description": {
        "opcode": "100001",
        "p1": "port bits",
        "r1": "5 bits"
      },
      "field_sizes": {
        "opcode": 6,
        "p1": 8,
        "r1": 3
      },
      "description": "Output from register r1 to port p1"
    },
    {
      "mnemonic": "OUTI",
      "opcode": 39,
      "operand_count": 2,
      "operand_types": ["port", "immediate"],
      "format": "100111 p1 r1",
      "bitwise_description": {
        "opcode": "100111",
        "p1": "port bits",
        "imm": "immediate value bits"
      },
      "field_sizes": {
        "opcode": 6,
        "p1": 8,
        "imm": 16
      },
      "description": "Output immediate number to port p1"
    },
    {
      "mnemonic": "LOADF",
      "opcode": 34,
      "operand_count": 2,
      "operand_types": ["register", "memory"],
      "format": "100010 r1 m1",
      "bitwise_description": {
        "opcode": "100010",
        "r1": "5 bits",
        "m1": "memory address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "m1": 16
      },
      "description": "Load floating-point from memory m1 to register r1"
    },
    {
      "mnemonic": "CALL",
      "opcode": 35,
      "operand_count": 1,
      "operand_types": ["address"],
      "format": "100011 a1",
      "bitwise_description": {
        "opcode": "100011",
        "a1": "address bits"
      },
      "field_sizes": {
        "opcode": 6,
        "a1": 16
      },
      "description": "Call subroutine at address a1"
    },
    {
      "mnemonic": "RET",
      "opcode": 36,
      "operand_count": 0,
      "operand_types": [],
      "format": "100100",
      "bitwise_description": {
        "opcode": "100100"
      },
      "field_sizes": {
        "opcode": 6
      },
      "description": "Return from subroutine"
    },
    {
      "mnemonic": "MOV",
      "opcode": 37,
      "operand_count": 2,
      "operand_types": ["register", "immediate"],
      "format": "100101 r1 r2",
      "bitwise_description": {
        "opcode": "100101",
        "r1": "5 bits",
        "imm": "immediate value bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3
      },
      "description": "Move content from register r2 to r1"
    },
    {
      "mnemonic": "ADDI",
      "opcode": 38,
      "operand_count": 3,
      "operand_types": ["register", "register", "immediate"],
      "format": "100110 r1 r2 imm",
      "bitwise_description": {
        "opcode": "100110",
        "r1": "5 bits",
        "r2": "5 bits",
        "imm": "immediate value bits"
      },
      "field_sizes": {
        "opcode": 6,
        "r1": 3,
        "r2": 3,
        "imm": 8
      },
      "description": "Add immediate value to register r2 and store in r1"
    }
  ]
}